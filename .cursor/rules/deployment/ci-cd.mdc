---
description: Enforce CI/CD pipeline patterns for Pulse Pomodoro timer deployment
globs:
  - '.github/workflows/**/*.yml'
  - 'scripts/**/*.sh'
  - 'scripts/**/*.ps1'
alwaysApply: true
priority: high
---

# CI/CD Pipeline

## Objective
Implement robust CI/CD pipeline for the Pulse Pomodoro timer with automated testing, building, and deployment across all platforms.

## Context
- Cross-platform Flutter application (iOS, Android, Windows, macOS, Linux, Web)
- Firebase deployment for web and backend services
- Multi-platform app store deployment
- Automated testing and quality gates
- Version management and release automation

## Rules

### GitHub Actions Workflow
- **Matrix Strategy**: Use matrix strategy for multi-platform builds
- **Caching**: Implement proper caching for dependencies
- **Parallel Jobs**: Run tests and builds in parallel
- **Conditional Deployment**: Deploy only on specific branches/tags

✅ **Good GitHub Actions Workflow:**
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze --fatal-infos
        
      - name: Run tests
        run: flutter test --coverage
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results/

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
            
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            flutter build linux --release
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            flutter build windows --release
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            flutter build macos --release
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-build
          path: |
            build/linux/x64/release/bundle/
            build/windows/x64/runner/Release/
            build/macos/Build/Products/Release/

  mobile-build:
    name: Mobile Build
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build Android
        run: flutter build apk --release
        
      - name: Build iOS
        run: flutter build ios --release --no-codesign
        
      - name: Upload mobile builds
        uses: actions/upload-artifact@v3
        with:
          name: mobile-builds
          path: |
            build/app/outputs/flutter-apk/
            build/ios/iphoneos/

  web-deploy:
    name: Web Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build Web
        run: flutter build web --release
        
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: pulse-timer
```

### Build Scripts
- **Platform Scripts**: Create platform-specific build scripts
- **Environment Setup**: Automate environment setup
- **Dependency Management**: Handle platform-specific dependencies
- **Error Handling**: Implement proper error handling and logging

✅ **Good Build Scripts:**
```bash
#!/bin/bash
# build.sh - Cross-platform build script for Pulse

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Flutter is installed
check_flutter() {
    if ! command -v flutter &> /dev/null; then
        log_error "Flutter is not installed or not in PATH"
        exit 1
    fi
    
    log_info "Flutter version: $(flutter --version | head -n 1)"
}

# Clean build artifacts
clean_build() {
    log_info "Cleaning build artifacts..."
    flutter clean
    flutter pub get
}

# Run tests
run_tests() {
    log_info "Running tests..."
    flutter test --coverage
    
    if [ $? -eq 0 ]; then
        log_info "All tests passed"
    else
        log_error "Tests failed"
        exit 1
    fi
}

# Analyze code
analyze_code() {
    log_info "Analyzing code..."
    flutter analyze --fatal-infos
    
    if [ $? -eq 0 ]; then
        log_info "Code analysis passed"
    else
        log_error "Code analysis failed"
        exit 1
    fi
}

# Build for specific platform
build_platform() {
    local platform=$1
    local build_type=${2:-release}
    
    log_info "Building for $platform ($build_type)..."
    
    case $platform in
        "android")
            flutter build apk --$build_type
            ;;
        "ios")
            flutter build ios --$build_type --no-codesign
            ;;
        "web")
            flutter build web --$build_type
            ;;
        "linux")
            flutter build linux --$build_type
            ;;
        "windows")
            flutter build windows --$build_type
            ;;
        "macos")
            flutter build macos --$build_type
            ;;
        *)
            log_error "Unknown platform: $platform"
            exit 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        log_info "Build successful for $platform"
    else
        log_error "Build failed for $platform"
        exit 1
    fi
}

# Deploy to Firebase
deploy_firebase() {
    log_info "Deploying to Firebase..."
    
    if ! command -v firebase &> /dev/null; then
        log_error "Firebase CLI is not installed"
        exit 1
    fi
    
    firebase deploy --only hosting
    
    if [ $? -eq 0 ]; then
        log_info "Firebase deployment successful"
    else
        log_error "Firebase deployment failed"
        exit 1
    fi
}

# Main function
main() {
    local platform=${1:-all}
    local build_type=${2:-release}
    
    log_info "Starting Pulse build process..."
    
    check_flutter
    clean_build
    run_tests
    analyze_code
    
    if [ "$platform" = "all" ]; then
        build_platform "web" $build_type
        build_platform "android" $build_type
        build_platform "ios" $build_type
        build_platform "linux" $build_type
        build_platform "windows" $build_type
        build_platform "macos" $build_type
    else
        build_platform $platform $build_type
    fi
    
    if [ "$platform" = "web" ] || [ "$platform" = "all" ]; then
        deploy_firebase
    fi
    
    log_info "Build process completed successfully!"
}

# Run main function with all arguments
main "$@"
```

### Release Management
- **Version Bumping**: Automate version bumping
- **Changelog Generation**: Generate changelogs automatically
- **Tag Management**: Create and manage release tags
- **Release Notes**: Generate release notes from commits

✅ **Good Release Management:**
```bash
#!/bin/bash
# release.sh - Release management script for Pulse

set -e

# Configuration
REPO_OWNER="cagrikaygusuz"
REPO_NAME="pulse"
CURRENT_VERSION=$(grep "version:" pubspec.yaml | sed 's/version: //')

# Functions
log_info() {
    echo -e "\033[0;32m[INFO]\033[0m $1"
}

log_error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1"
}

# Bump version
bump_version() {
    local version_type=$1
    
    log_info "Bumping version ($version_type)..."
    
    case $version_type in
        "major")
            new_version=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
            ;;
        "minor")
            new_version=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
            ;;
        "patch")
            new_version=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
            ;;
        *)
            log_error "Invalid version type: $version_type"
            exit 1
            ;;
    esac
    
    # Update pubspec.yaml
    sed -i "s/version: $CURRENT_VERSION/version: $new_version/" pubspec.yaml
    
    log_info "Version bumped from $CURRENT_VERSION to $new_version"
    echo $new_version
}

# Generate changelog
generate_changelog() {
    local version=$1
    
    log_info "Generating changelog for version $version..."
    
    # Get commits since last tag
    local last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
    local commits=""
    
    if [ -n "$last_tag" ]; then
        commits=$(git log --oneline $last_tag..HEAD)
    else
        commits=$(git log --oneline)
    fi
    
    # Create changelog entry
    cat > CHANGELOG.md << EOF
# Changelog

## [$version] - $(date +%Y-%m-%d)

### Added
- New features and improvements

### Changed
- Changes to existing functionality

### Fixed
- Bug fixes

### Commits
$commits

EOF
    
    log_info "Changelog generated"
}

# Create release
create_release() {
    local version=$1
    
    log_info "Creating release $version..."
    
    # Commit changes
    git add pubspec.yaml CHANGELOG.md
    git commit -m "Release version $version"
    
    # Create tag
    git tag -a "v$version" -m "Release version $version"
    
    # Push changes
    git push origin main
    git push origin "v$version"
    
    log_info "Release $version created and pushed"
}

# Main function
main() {
    local version_type=${1:-patch}
    
    log_info "Starting release process..."
    
    # Check if working directory is clean
    if ! git diff-index --quiet HEAD --; then
        log_error "Working directory is not clean. Please commit or stash changes."
        exit 1
    fi
    
    # Bump version
    local new_version=$(bump_version $version_type)
    
    # Generate changelog
    generate_changelog $new_version
    
    # Create release
    create_release $new_version
    
    log_info "Release process completed successfully!"
}

# Run main function
main "$@"
```

### Environment Management
- **Environment Variables**: Manage environment-specific variables
- **Secrets Management**: Secure handling of secrets and API keys
- **Configuration Files**: Environment-specific configuration files
- **Build Variants**: Different build variants for different environments

✅ **Good Environment Management:**
```yaml
# .github/workflows/environments.yml
name: Environment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Configure environment
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "FIREBASE_PROJECT_ID=pulse-timer-prod" >> $GITHUB_ENV
            echo "API_BASE_URL=https://api.pulse-timer.com" >> $GITHUB_ENV
          else
            echo "FIREBASE_PROJECT_ID=pulse-timer-staging" >> $GITHUB_ENV
            echo "API_BASE_URL=https://staging-api.pulse-timer.com" >> $GITHUB_ENV
          fi
          
      - name: Build Web
        run: flutter build web --release
        env:
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          API_BASE_URL: ${{ env.API_BASE_URL }}
          
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: ${{ github.event.inputs.environment }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
```

## Exceptions
- Emergency deployments can bypass certain quality gates
- Hotfixes can skip non-critical tests
- Platform-specific builds may require manual intervention